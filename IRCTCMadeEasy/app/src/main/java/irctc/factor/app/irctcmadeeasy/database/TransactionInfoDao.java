package irctc.factor.app.irctcmadeeasy.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import irctc.factor.app.irctcmadeeasy.database.TransactionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_INFO".
*/
public class TransactionInfoDao extends AbstractDao<TransactionInfo, Long> {

    public static final String TABLENAME = "TRANSACTION_INFO";

    /**
     * Properties of entity TransactionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Json = new Property(1, String.class, "Json", false, "JSON");
        public final static Property Trainno = new Property(2, Integer.class, "Trainno", false, "TRAINNO");
        public final static Property PnrId = new Property(3, long.class, "pnrId", false, "PNR_ID");
        public final static Property Quota = new Property(4, Integer.class, "Quota", false, "QUOTA");
        public final static Property JourneyDatre = new Property(5, Integer.class, "JourneyDatre", false, "JOURNEY_DATRE");
        public final static Property Source = new Property(6, String.class, "Source", false, "SOURCE");
        public final static Property Destination = new Property(7, String.class, "Destination", false, "DESTINATION");
        public final static Property Class = new Property(8, String.class, "Class", false, "CLASS");
        public final static Property TicketStatus = new Property(9, String.class, "TicketStatus", false, "TICKET_STATUS");
        public final static Property SeatLocation = new Property(10, String.class, "SeatLocation", false, "SEAT_LOCATION");
        public final static Property BookedViaApp = new Property(11, String.class, "BookedViaApp", false, "BOOKED_VIA_APP");
    };

    private DaoSession daoSession;


    public TransactionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"JSON\" TEXT," + // 1: Json
                "\"TRAINNO\" INTEGER," + // 2: Trainno
                "\"PNR_ID\" INTEGER NOT NULL ," + // 3: pnrId
                "\"QUOTA\" INTEGER," + // 4: Quota
                "\"JOURNEY_DATRE\" INTEGER," + // 5: JourneyDatre
                "\"SOURCE\" TEXT," + // 6: Source
                "\"DESTINATION\" TEXT," + // 7: Destination
                "\"CLASS\" TEXT," + // 8: Class
                "\"TICKET_STATUS\" TEXT," + // 9: TicketStatus
                "\"SEAT_LOCATION\" TEXT," + // 10: SeatLocation
                "\"BOOKED_VIA_APP\" TEXT);"); // 11: BookedViaApp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransactionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Json = entity.getJson();
        if (Json != null) {
            stmt.bindString(2, Json);
        }
 
        Integer Trainno = entity.getTrainno();
        if (Trainno != null) {
            stmt.bindLong(3, Trainno);
        }
        stmt.bindLong(4, entity.getPnrId());
 
        Integer Quota = entity.getQuota();
        if (Quota != null) {
            stmt.bindLong(5, Quota);
        }
 
        Integer JourneyDatre = entity.getJourneyDatre();
        if (JourneyDatre != null) {
            stmt.bindLong(6, JourneyDatre);
        }
 
        String Source = entity.getSource();
        if (Source != null) {
            stmt.bindString(7, Source);
        }
 
        String Destination = entity.getDestination();
        if (Destination != null) {
            stmt.bindString(8, Destination);
        }
 
        String Class = entity.getClassName();
        if (Class != null) {
            stmt.bindString(9, Class);
        }
 
        String TicketStatus = entity.getTicketStatus();
        if (TicketStatus != null) {
            stmt.bindString(10, TicketStatus);
        }
 
        String SeatLocation = entity.getSeatLocation();
        if (SeatLocation != null) {
            stmt.bindString(11, SeatLocation);
        }
 
        String BookedViaApp = entity.getBookedViaApp();
        if (BookedViaApp != null) {
            stmt.bindString(12, BookedViaApp);
        }
    }

    @Override
    protected void attachEntity(TransactionInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransactionInfo readEntity(Cursor cursor, int offset) {
        TransactionInfo entity = new TransactionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Json
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Trainno
            cursor.getLong(offset + 3), // pnrId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Quota
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // JourneyDatre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Source
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Destination
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Class
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TicketStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SeatLocation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // BookedViaApp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransactionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrainno(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPnrId(cursor.getLong(offset + 3));
        entity.setQuota(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setJourneyDatre(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDestination(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClass(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTicketStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSeatLocation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBookedViaApp(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TransactionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TransactionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPnrInfoDao().getAllColumns());
            builder.append(" FROM TRANSACTION_INFO T");
            builder.append(" LEFT JOIN PNR_INFO T0 ON T.\"PNR_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TransactionInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        TransactionInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PnrInfo pnrInfo = loadCurrentOther(daoSession.getPnrInfoDao(), cursor, offset);
         if(pnrInfo != null) {
            entity.setPnrInfo(pnrInfo);
        }

        return entity;    
    }

    public TransactionInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TransactionInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TransactionInfo> list = new ArrayList<TransactionInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TransactionInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TransactionInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
