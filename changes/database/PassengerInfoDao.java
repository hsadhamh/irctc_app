package irctc.factor.app.irctcmadeeasy.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import irctc.factor.app.irctcmadeeasy.database.PassengerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASSENGER_INFO".
*/
public class PassengerInfoDao extends AbstractDao<PassengerInfo, Long> {

    public static final String TABLENAME = "PASSENGER_INFO";

    /**
     * Properties of entity PassengerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Age = new Property(2, Integer.class, "Age", false, "AGE");
        public final static Property Gender = new Property(3, String.class, "Gender", false, "GENDER");
        public final static Property Food = new Property(4, String.class, "Food", false, "FOOD");
        public final static Property Berth = new Property(5, String.class, "Berth", false, "BERTH");
        public final static Property Child = new Property(6, String.class, "Child", false, "CHILD");
        public final static Property Nationality = new Property(7, String.class, "Nationality", false, "NATIONALITY");
        public final static Property AadharCardNo = new Property(8, Integer.class, "AadharCardNo", false, "AADHAR_CARD_NO");
        public final static Property TransactionId = new Property(9, long.class, "transactionId", false, "TRANSACTION_ID");
    };

    private Query<PassengerInfo> transactionInfo_PassengerInfoListQuery;

    public PassengerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PassengerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASSENGER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: Name
                "\"AGE\" INTEGER," + // 2: Age
                "\"GENDER\" TEXT," + // 3: Gender
                "\"FOOD\" TEXT," + // 4: Food
                "\"BERTH\" TEXT," + // 5: Berth
                "\"CHILD\" TEXT," + // 6: Child
                "\"NATIONALITY\" TEXT," + // 7: Nationality
                "\"AADHAR_CARD_NO\" INTEGER," + // 8: AadharCardNo
                "\"TRANSACTION_ID\" INTEGER NOT NULL );"); // 9: transactionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASSENGER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PassengerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        Integer Age = entity.getAge();
        if (Age != null) {
            stmt.bindLong(3, Age);
        }
 
        String Gender = entity.getGender();
        if (Gender != null) {
            stmt.bindString(4, Gender);
        }
 
        String Food = entity.getFood();
        if (Food != null) {
            stmt.bindString(5, Food);
        }
 
        String Berth = entity.getBerth();
        if (Berth != null) {
            stmt.bindString(6, Berth);
        }
 
        String Child = entity.getChild();
        if (Child != null) {
            stmt.bindString(7, Child);
        }
 
        String Nationality = entity.getNationality();
        if (Nationality != null) {
            stmt.bindString(8, Nationality);
        }
 
        Integer AadharCardNo = entity.getAadharCardNo();
        if (AadharCardNo != null) {
            stmt.bindLong(9, AadharCardNo);
        }
        stmt.bindLong(10, entity.getTransactionId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PassengerInfo readEntity(Cursor cursor, int offset) {
        PassengerInfo entity = new PassengerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Food
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Berth
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Child
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Nationality
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // AadharCardNo
            cursor.getLong(offset + 9) // transactionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PassengerInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFood(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBerth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChild(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNationality(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAadharCardNo(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTransactionId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PassengerInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PassengerInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "passengerInfoList" to-many relationship of TransactionInfo. */
    public List<PassengerInfo> _queryTransactionInfo_PassengerInfoList(long transactionId) {
        synchronized (this) {
            if (transactionInfo_PassengerInfoListQuery == null) {
                QueryBuilder<PassengerInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TransactionId.eq(null));
                transactionInfo_PassengerInfoListQuery = queryBuilder.build();
            }
        }
        Query<PassengerInfo> query = transactionInfo_PassengerInfoListQuery.forCurrentThread();
        query.setParameter(0, transactionId);
        return query.list();
    }

}
