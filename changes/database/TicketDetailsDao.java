package irctc.factor.app.irctcmadeeasy.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TICKET_DETAILS".
*/
public class TicketDetailsDao extends AbstractDao<TicketDetails, Long> {

    public static final String TABLENAME = "TICKET_DETAILS";

    /**
     * Properties of entity TicketDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Source = new Property(1, String.class, "Source", false, "SOURCE");
        public final static Property Destination = new Property(2, String.class, "Destination", false, "DESTINATION");
        public final static Property Boarding = new Property(3, String.class, "Boarding", false, "BOARDING");
        public final static Property JourneyDate = new Property(4, String.class, "JourneyDate", false, "JOURNEY_DATE");
        public final static Property Trainno = new Property(5, String.class, "Trainno", false, "TRAINNO");
        public final static Property IrctcClass = new Property(6, String.class, "IrctcClass", false, "IRCTC_CLASS");
        public final static Property Quota = new Property(7, String.class, "Quota", false, "QUOTA");
        public final static Property MobileNumber = new Property(8, String.class, "MobileNumber", false, "MOBILE_NUMBER");
        public final static Property Coach = new Property(9, String.class, "Coach", false, "COACH");
        public final static Property AutoUpgrade = new Property(10, String.class, "AutoUpgrade", false, "AUTO_UPGRADE");
        public final static Property BookOnConfirm = new Property(11, String.class, "BookOnConfirm", false, "BOOK_ON_CONFIRM");
        public final static Property ConditionsOnBook = new Property(12, String.class, "conditionsOnBook", false, "CONDITIONS_ON_BOOK");
        public final static Property Json = new Property(13, String.class, "Json", false, "JSON");
    };


    public TicketDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TICKET_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SOURCE\" TEXT," + // 1: Source
                "\"DESTINATION\" TEXT," + // 2: Destination
                "\"BOARDING\" TEXT," + // 3: Boarding
                "\"JOURNEY_DATE\" TEXT," + // 4: JourneyDate
                "\"TRAINNO\" TEXT," + // 5: Trainno
                "\"IRCTC_CLASS\" TEXT," + // 6: IrctcClass
                "\"QUOTA\" TEXT," + // 7: Quota
                "\"MOBILE_NUMBER\" TEXT," + // 8: MobileNumber
                "\"COACH\" TEXT," + // 9: Coach
                "\"AUTO_UPGRADE\" TEXT," + // 10: AutoUpgrade
                "\"BOOK_ON_CONFIRM\" TEXT," + // 11: BookOnConfirm
                "\"CONDITIONS_ON_BOOK\" TEXT," + // 12: conditionsOnBook
                "\"JSON\" TEXT);"); // 13: Json
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TICKET_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TicketDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Source = entity.getSource();
        if (Source != null) {
            stmt.bindString(2, Source);
        }
 
        String Destination = entity.getDestination();
        if (Destination != null) {
            stmt.bindString(3, Destination);
        }
 
        String Boarding = entity.getBoarding();
        if (Boarding != null) {
            stmt.bindString(4, Boarding);
        }
 
        String JourneyDate = entity.getJourneyDate();
        if (JourneyDate != null) {
            stmt.bindString(5, JourneyDate);
        }
 
        String Trainno = entity.getTrainno();
        if (Trainno != null) {
            stmt.bindString(6, Trainno);
        }
 
        String IrctcClass = entity.getIrctcClass();
        if (IrctcClass != null) {
            stmt.bindString(7, IrctcClass);
        }
 
        String Quota = entity.getQuota();
        if (Quota != null) {
            stmt.bindString(8, Quota);
        }
 
        String MobileNumber = entity.getMobileNumber();
        if (MobileNumber != null) {
            stmt.bindString(9, MobileNumber);
        }
 
        String Coach = entity.getCoach();
        if (Coach != null) {
            stmt.bindString(10, Coach);
        }
 
        String AutoUpgrade = entity.getAutoUpgrade();
        if (AutoUpgrade != null) {
            stmt.bindString(11, AutoUpgrade);
        }
 
        String BookOnConfirm = entity.getBookOnConfirm();
        if (BookOnConfirm != null) {
            stmt.bindString(12, BookOnConfirm);
        }
 
        String conditionsOnBook = entity.getConditionsOnBook();
        if (conditionsOnBook != null) {
            stmt.bindString(13, conditionsOnBook);
        }
 
        String Json = entity.getJson();
        if (Json != null) {
            stmt.bindString(14, Json);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TicketDetails readEntity(Cursor cursor, int offset) {
        TicketDetails entity = new TicketDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Destination
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Boarding
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // JourneyDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Trainno
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IrctcClass
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Quota
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MobileNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Coach
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // AutoUpgrade
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BookOnConfirm
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // conditionsOnBook
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // Json
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TicketDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDestination(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBoarding(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJourneyDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTrainno(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIrctcClass(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQuota(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMobileNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCoach(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAutoUpgrade(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBookOnConfirm(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setConditionsOnBook(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setJson(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TicketDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TicketDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
