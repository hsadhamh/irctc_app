package irctc.factor.app.irctcmadeeasy.database;

import java.util.List;
import irctc.factor.app.irctcmadeeasy.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TRANSACTION_INFO".
 */
public class TransactionInfo {

    private Long id;
    private String Json;
    private Integer Trainno;
    private long pnrId;
    private Integer Quota;
    private Integer JourneyDatre;
    private String Source;
    private String Destination;
    private String Class;
    private String TicketStatus;
    private String SeatLocation;
    private String BookedViaApp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TransactionInfoDao myDao;

    private PnrInfo pnrInfo;
    private Long pnrInfo__resolvedKey;

    private List<PassengerInfo> passengerInfoList;

    public TransactionInfo() {
    }

    public TransactionInfo(Long id) {
        this.id = id;
    }

    public TransactionInfo(Long id, String Json, Integer Trainno, long pnrId, Integer Quota, Integer JourneyDatre, String Source, String Destination, String Class, String TicketStatus, String SeatLocation, String BookedViaApp) {
        this.id = id;
        this.Json = Json;
        this.Trainno = Trainno;
        this.pnrId = pnrId;
        this.Quota = Quota;
        this.JourneyDatre = JourneyDatre;
        this.Source = Source;
        this.Destination = Destination;
        this.Class = Class;
        this.TicketStatus = TicketStatus;
        this.SeatLocation = SeatLocation;
        this.BookedViaApp = BookedViaApp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTransactionInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getJson() {
        return Json;
    }

    public void setJson(String Json) {
        this.Json = Json;
    }

    public Integer getTrainno() {
        return Trainno;
    }

    public void setTrainno(Integer Trainno) {
        this.Trainno = Trainno;
    }

    public long getPnrId() {
        return pnrId;
    }

    public void setPnrId(long pnrId) {
        this.pnrId = pnrId;
    }

    public Integer getQuota() {
        return Quota;
    }

    public void setQuota(Integer Quota) {
        this.Quota = Quota;
    }

    public Integer getJourneyDatre() {
        return JourneyDatre;
    }

    public void setJourneyDatre(Integer JourneyDatre) {
        this.JourneyDatre = JourneyDatre;
    }

    public String getSource() {
        return Source;
    }

    public void setSource(String Source) {
        this.Source = Source;
    }

    public String getDestination() {
        return Destination;
    }

    public void setDestination(String Destination) {
        this.Destination = Destination;
    }

    public String getClassName() {
        return this.Class;
    }

    public void setClass(String Class) {
        this.Class = Class;
    }

    public String getTicketStatus() {
        return TicketStatus;
    }

    public void setTicketStatus(String TicketStatus) {
        this.TicketStatus = TicketStatus;
    }

    public String getSeatLocation() {
        return SeatLocation;
    }

    public void setSeatLocation(String SeatLocation) {
        this.SeatLocation = SeatLocation;
    }

    public String getBookedViaApp() {
        return BookedViaApp;
    }

    public void setBookedViaApp(String BookedViaApp) {
        this.BookedViaApp = BookedViaApp;
    }

    /** To-one relationship, resolved on first access. */
    public PnrInfo getPnrInfo() {
        long __key = this.pnrId;
        if (pnrInfo__resolvedKey == null || !pnrInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PnrInfoDao targetDao = daoSession.getPnrInfoDao();
            PnrInfo pnrInfoNew = targetDao.load(__key);
            synchronized (this) {
                pnrInfo = pnrInfoNew;
            	pnrInfo__resolvedKey = __key;
            }
        }
        return pnrInfo;
    }

    public void setPnrInfo(PnrInfo pnrInfo) {
        if (pnrInfo == null) {
            throw new DaoException("To-one property 'pnrId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.pnrInfo = pnrInfo;
            pnrId = pnrInfo.getId();
            pnrInfo__resolvedKey = pnrId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PassengerInfo> getPassengerInfoList() {
        if (passengerInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PassengerInfoDao targetDao = daoSession.getPassengerInfoDao();
            List<PassengerInfo> passengerInfoListNew = targetDao._queryTransactionInfo_PassengerInfoList(id);
            synchronized (this) {
                if(passengerInfoList == null) {
                    passengerInfoList = passengerInfoListNew;
                }
            }
        }
        return passengerInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPassengerInfoList() {
        passengerInfoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
